<?php
/**
 * Copyright Â© 2016 Magestore. All rights reserved.
 * See COPYING.txt for license details.
 */

// @codingStandardsIgnoreFile

?>
<?php
/**
 * @see \Magento\Catalog\Block\Adminhtml\Form\Renderer\Fieldset\Element
 */
?>
<?php
/* @var $block \Magestore\Shopbybrand\Block\Adminhtml\Widget\Form\Renderer\Fieldset\Element */
$element = $block->getElement();
$note = $element->getNote() ? '<div class="note">' . $element->getNote() . '</div>' : '';
$elementBeforeLabel = $element->getExtType() == 'checkbox' || $element->getExtType() == 'radio';
$addOn = $element->getBeforeElementHtml() || $element->getAfterElementHtml();
$fieldId = ($element->getHtmlId()) ? ' id="attribute-' . $element->getHtmlId() . '-container"' : '';
$entity = $element->getEntityAttribute();
$fieldClass = "field field-{$element->getId()} {$element->getCssClass()}";
$fieldClass .= ($elementBeforeLabel) ? ' choice' : '';
$fieldClass .= ($addOn) ? ' with-addon' : '';
$fieldClass .= ($element->getRequired()) ? ' required' : '';
$fieldClass .= ($note) ? ' with-note' : '';
$fieldClass .= ($entity && $entity->getIsUserDefined()) ? ' user-defined type-' . $entity->getFrontendInput() : '';

$fieldAttributes = $fieldId . ' class="' . $fieldClass . '" '
    . $block->getUiId('form-field', $element->getId());
?>

<?php $block->checkFieldDisable() ?>
<?php
$elementToggleCode = $element->getToggleCode() ? $element->getToggleCode()
    : 'toggleValueElements(this, this.parentNode.parentNode.parentNode)';
?>
<?php if (!$element->getNoDisplay()): ?>
    <?php if ($element->getType() == 'hidden'): ?>
        <?php echo $element->getElementHtml() ?>
    <?php else: ?>
        <div<?php /* @escapeNotVerified */ echo $fieldAttributes ?> data-attribute-code="<?php echo $element->getHtmlId() ?>"
                                                                    data-apply-to="<?php echo $block->escapeHtml($this->helper('Magento\Framework\Json\Helper\Data')->jsonEncode(
                                                                        $element->hasEntityAttribute() ? $element->getEntityAttribute()->getApplyTo() : []
                                                                    ))?>"
        >
            <?php if ($elementBeforeLabel): ?>
                <?php echo $block->getElementHtml() ?>
                <?php echo $element->getLabelHtml() ?>
                <?php /* @escapeNotVerified */ echo $note ?>
            <?php else: ?>
                <?php echo $element->getLabelHtml() ?>
                <div class="control">
                    <?php /* @escapeNotVerified */ echo($addOn) ? '<div class="addon">' . $block->getElementHtml() . '</div>' : $block->getElementHtml(); ?>
                    <?php /* @escapeNotVerified */ echo $note ?>
                </div>
            <?php endif; ?>
            <div class="field-service" value-scope="<?php /* @escapeNotVerified */ echo $block->getScopeLabel()?>">
                <?php if ($block->canDisplayUseDefault()): ?>
                    <label for="<?php echo $element->getHtmlId() ?>_default" class="choice use-default">
                        <input <?php if ($element->getReadonly()):?> disabled="disabled"<?php endif; ?>
                            type="checkbox"
                            name="use_default[<?php echo $block->getElementName() ?>]"
                            class="use-default-control"
                            id="<?php echo $element->getHtmlId() ?>_default"
                            <?php if ($block->usedDefault()): ?> checked="checked" value="true" <?php else: ?> value="false" <?php endif; ?>
                            onclick="<?php /* @escapeNotVerified */ echo $elementToggleCode; ?>"
                        />
                        <span class="use-default-label"><?php /* @escapeNotVerified */ echo __('Use Default Value') ?></span>
                    </label>
                <?php endif; ?>
            </div>
        </div>
    <?php endif; ?>
<?php endif; ?>
<script type="text/javascript">
    require(['prototype'],function ($) {
        toggleValueElements = function toggleValueElements(checkbox, container, excludedElements, checked){
            if(container && checkbox){
                var ignoredElements = [checkbox];
                if (typeof excludedElements != 'undefined') {
                    if (Object.prototype.toString.call(excludedElements) != '[object Array]') {
                        excludedElements = [excludedElements];
                    }
                    for (var i = 0; i < excludedElements.length; i++) {
                        ignoredElements.push(excludedElements[i]);
                    }
                }
                //var elems = container.select('select', 'input');
                var elems = Element.select(container, ['select', 'input', 'textarea', 'button', 'img']).filter(function(el){
                    return (el.readAttribute('type') != 'hidden');
                });
                var isDisabled = (checked != undefined ? checked : checkbox.checked);
                elems.each(function (elem) {
                    if (checkByProductPriceType(elem)) {
                        var i = ignoredElements.length;
                        while (i-- && elem != ignoredElements[i]);
                        if (i != -1) {
                            return;
                        }

                        elem.disabled = isDisabled;
                        if (isDisabled) {
                            elem.addClassName('disabled');
                        } else {
                            elem.removeClassName('disabled');
                        }
                        if (elem.nodeName.toLowerCase() == 'img') {
                            isDisabled ? elem.hide() : elem.show();
                        }
                    }
                });
            }
        }
    });
</script>